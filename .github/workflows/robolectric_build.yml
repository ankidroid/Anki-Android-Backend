name: Build JAR for Robolectric Testing
on:
  push:
  schedule:
    - cron: "0 0 * * *"
  pull_request:

jobs:
  build:
    runs-on: macos-latest
    timeout-minutes: 80
    steps:
#    - name: Configure Mac OS environment variables
        # gnu tar for cache issue: https://github.com/actions/cache/issues/403
        # error[E0463]: can't find crate for `serde_derive` which `serde` depends on
        # --> /Users/runner/work/Anki-Android-Backend/Anki-Android-Backend/anki/rslib/src/decks/schema11.rs:30:9

        # ::add-path has now been deprectated
        # echo "::add-path::/usr/local/opt/gnu-tar/libexec/gnubin"

#      run: |
#          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH
    - uses: actions/checkout@v2
      with:
          submodules: 'true' # anki is a submodule

    # i18n did not seem to be handled
    - name: Init i18n submodule
      run: git submodule update --init --recursive

    - name: Install NDK (r22 - 22.0.7026061)
      run: .github/scripts/install_ndk_macos.sh r22 22.0.7026061

# TODO: Needs investigation. This seemed to work before adding gnubin/v1, just with serde broken.
# Now it doesn't seem to be picked up by rust.
#    - name: Cache Rust dependencies
#      uses: actions/cache@v1.0.1
#      with:
#        path: rslib-bridge/target
#        key: ${{ runner.OS }}-build-v1-${{ hashFiles('**/Cargo.lock') }}
#        restore-keys: |
#          ${{ runner.OS }}-build-v1-

    # install cargo
    - name: Install Rust
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: nightly # nightly is currently required for Robolectric Testing
        override: true
        components: rustfmt, clippy

    # actions-rs only accepts "target" (although a "targets" param to be added in v2). We need 7 targets.
    - name: Install Rust Targets
      run: .github/scripts/install_rust_robolectric_targets.sh

    - name: Install x86_64-w64-mingw32-gcc
      run: brew install mingw-w64 && x86_64-w64-mingw32-gcc -v

    - name: Install x86_64-unknown-linux-gnu
      run: |
           brew tap SergioBenitez/osxct
           brew install x86_64-unknown-linux-gnu
           x86_64-unknown-linux-gnu-gcc -v

    - name: Build JAR
      run: |
              export ANKIDROID_LINUX_CC=x86_64-unknown-linux-gnu-gcc
              export ANKIDROID_MACOS_CC=cc
              ./gradlew clean rsdroid-testing:build -Dorg.gradle.project.macCC=$ANKIDROID_MACOS_CC -DtestBuildType=debug -Dorg.gradle.daemon=false -Dorg.gradle.console=plain

    - name: Check Compiled Libraries
      run: >
              cd rsdroid-testing/assets &&
              ../../.github/scripts/check_robolectric_assets.sh


    - name: Upload rsdroid-testing JAR as artifact
      uses: actions/upload-artifact@v2
      with:
        name: rsdroid-testing
        if-no-files-found: error
        path: rsdroid-testing/build/libs/

    - name: Upload fluent.proto
      uses: actions/upload-artifact@v2
      with:
        name: anki-proto
        if-no-files-found: error
        path: anki/proto/

  test:
    needs: build
    runs-on: ${{matrix.os}}
    timeout-minutes: 30
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
      fail-fast: false
    steps:
    - uses: actions/checkout@v2
      with:
          submodules: 'true' # we need the .proto files, but not the i18n files in the recursive submodule (yet).

    - uses: actions/download-artifact@v2
      name: Download Artifact
      with:
        name: rsdroid-testing
        path: rsdroid-testing/build/libs

    - uses: actions/download-artifact@v2
      name: Download fluent.proto
      with:
        name: anki-proto
        path: anki/proto/

    - name: Ensure fluent.proto exists
      if: matrix.os != 'windows-latest'
      run: |
              if [ ! -f anki/proto/fluent.proto ]; then
                  echo "fluent.proto not generated"
                  exit 1
              fi

    - name: Install NDK (silent)
      if: matrix.os == 'ubuntu-latest'
      run: .github/scripts/install_ndk.sh 22.0.7026061

    - name: Install NDK (macOS) (r22 - 22.0.7026061)
      if: matrix.os == 'macos-latest'
      run: .github/scripts/install_ndk_macos.sh r22 22.0.7026061

    - name: Install NDK (Windows - silent)
      if: matrix.os == 'windows-latest'
      run: |
            Write-Host "NDK Install Started"

            (. "$Env:ANDROID_HOME\tools\bin\sdkmanager.bat" --install "ndk;22.0.7026061" --sdk_root="$Env:ANDROID_SDK_ROOT") | out-null

            Write-Host "NDK Install Completed"

    - name: Install Pyenv
      if: matrix.os == 'macos-latest'
      run: .github/scripts/macos_install_pyenv.sh

    # pyenv requires bash_profile, so we need the -l (login) arg for bash from now on on macOS
    # TODO: find a better way to disambiguate the "shell" variable - we need it for bash being laucnhed with --noprofile while using pyenv
    - name: Setup Pyenv
      if: matrix.os == 'macos-latest'
      shell: bash -l {0}
      run: |
             pyenv install 3.7.9
             pyenv shell 3.7.9
             pyenv global 3.7.9

    - name: Install Python Setuptools
      if: matrix.os == 'ubuntu-latest'
      run: sudo apt-get install python3-setuptools

    - name: Install & Test Protobuf Compiler
      if: matrix.os != 'windows-latest'
      shell: bash -l {0} 
      run: |
              pip3 install protobuf
              pip3 install protobuf-compiler
              python3 .github/scripts/protoc_gen_deps.py
              
    - name: Install & Test Protobuf Compiler (win)
      if: matrix.os == 'windows-latest'
      run: |
              Set-Alias -Name "python3" -Value "python"
              pip3 install protobuf
              pip3 install protobuf-compiler
              python3 .github/scripts/protoc_gen_deps.py
              
    - name: Run Tests
      if: matrix.os != 'windows-latest'
      shell: bash -l {0} 
      run: ./gradlew rsdroid:test -x jar -x cargoBuildArm -x cargoBuildX86 -x cargoBuildArm64 -x cargoBuildX86_64
      
    - name: Run Tests (win)
      if: matrix.os == 'windows-latest'
      run: ./gradlew rsdroid:test -x jar -x cargoBuildArm -x cargoBuildX86 -x cargoBuildArm64 -x cargoBuildX86_64