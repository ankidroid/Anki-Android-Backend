# For most projects, this workflow file will not need changing; you simply need
# to commit it to your repository.
#
# You may wish to alter this file to override the set of languages analyzed,
# or to provide custom queries or build logic.
#
# ******** NOTE ********
# We have attempted to detect the languages in your repository. Please check
# the `language` matrix defined below to confirm you have the correct set of
# supported CodeQL languages.
#
name: "CodeQL"

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  schedule:
    - cron: '15 10 * * 0'

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    # Runner size impacts CodeQL analysis time. To learn more, please see:
    #   - https://gh.io/recommended-hardware-resources-for-running-codeql
    #   - https://gh.io/supported-runners-and-hardware-resources
    #   - https://gh.io/using-larger-runners (GitHub.com only)
    # Consider using larger runners or machines with greater resources for possible analysis time improvements.
    runs-on: ${{ (matrix.language == 'swift' && 'macos-latest') || 'ubuntu-latest' }}
    timeout-minutes: ${{ (matrix.language == 'swift' && 120) || 360 }}
    permissions:
      # required for all workflows
      security-events: write

      # required to fetch internal or private CodeQL packs
      packages: read

      # only required for workflows in private repositories
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
        - language: java-kotlin
          build-mode: manual
        # CodeQL supports the following values keywords for 'language': 'c-cpp', 'csharp', 'go', 'java-kotlin', 'javascript-typescript', 'python', 'ruby', 'swift'
        # Use `c-cpp` to analyze code written in C, C++ or both
        # Use 'java-kotlin' to analyze code written in Java, Kotlin or both
        # Use 'javascript-typescript' to analyze code written in JavaScript, TypeScript or both
        # To learn more about changing the languages that are analyzed or customizing the build mode for your analysis,
        # see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/customizing-your-advanced-setup-for-code-scanning.
        # If you are analyzing a compiled language, you can modify the 'build-mode' for that language to customize how
        # your codebase is analyzed, see https://docs.github.com/en/code-security/code-scanning/creating-an-advanced-setup-for-code-scanning/codeql-code-scanning-for-compiled-languages
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # Initializes the CodeQL tools for scanning.
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: ${{ matrix.language }}
        build-mode: ${{ matrix.build-mode }}
        # If you wish to specify custom queries, you can do so here or in a config file.
        # By default, queries listed here will override any specified in a config file.
        # Prefix the list here with "+" to use these queries and those in the config file.

        # For more details on CodeQL's query packs, refer to: https://docs.github.com/en/code-security/code-scanning/automatically-scanning-your-code-for-vulnerabilities-and-errors/configuring-code-scanning#using-queries-in-ql-packs
        # queries: security-extended,security-and-quality

    # If the analyze step fails for one of the languages you are analyzing with
    # "We were unable to automatically build your code", modify the matrix above
    # to set the build mode to "manual" for that language. Then modify this step
    # to build your code.
    # ℹ️ Command-line programs to run using the OS shell.
    # 📚 See https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#jobsjob_idstepsrun
    # We need a great deal of pre-build stuff for the Java to work, because it relies on the Rust working...
    - name: Liberate disk space (Ubuntu)
      if: matrix.build-mode == 'manual'
      uses: jlumbroso/free-disk-space@main
      with:
        tool-cache: false
        android: false
        dotnet: true
        haskell: true
        large-packages: false
        docker-images: true
        swap-storage: false

    - name: Fetch submodules
      if: matrix.build-mode == 'manual'
      run: git submodule update --init

    - name: Set NDK version (Unix)
      if: matrix.build-mode == 'manual'
      run: |
        echo "ANDROID_NDK_HOME=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV
        echo "ANDROID_NDK_ROOT=$ANDROID_NDK_LATEST_HOME" >> $GITHUB_ENV

    - name: Configure JDK
      if: matrix.build-mode == 'manual'
      uses: actions/setup-java@v4
      with:
        distribution: "temurin"
        java-version: "21" # matches Anki-Android

    - name: Restore Rust Cache (Unix)
      if: matrix.build-mode == 'manual'
      uses: actions/cache/restore@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
          anki/out/rust
          anki/out/download
          anki/out/node_modules
        key: ${{ runner.os }}-rust-debug-v6-${{ hashFiles('Cargo.lock') }}-${{ hashFiles('anki/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-rust-debug-v6

    - name: Setup N2
      if: matrix.build-mode == 'manual'
      run: bash ./anki/tools/install-n2

    - name: Setup Gradle
      if: matrix.build-mode == 'manual'
      uses: gradle/actions/setup-gradle@v3
      timeout-minutes: 5
      with:
        # Only write to the cache for builds on the 'main' branches, stops branches evicting main cache
        # Builds on other branches will only read from main branch cache writes
        # Comment this and the with: above out for performance testing on a branch
        cache-read-only: ${{ github.ref != 'refs/heads/main' }}
        gradle-home-cache-cleanup: true

    - name: Build all (current platform)
      if: matrix.build-mode == 'manual'
      # Ubuntu currently requires multiple build attempts before it succeeds - it builds a little further each time then works
      # This happens the same way every time in CI so far, and is reproducible locally if you have an Ubuntu system
      # This needs a root-cause analysis (see #373) but we will use a retry hack for Ubuntu only to unblock PRs until that is done
      uses: nick-fields/retry@v3
      with:
        timeout_minutes: 20
        max_attempts: 5
        retry_wait_seconds: 0
        retry_on: error
        command: |
          cargo run -p build_rust
          ./gradlew build

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:${{matrix.language}}"
