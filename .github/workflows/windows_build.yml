name: rsdroid (Windows)
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 * * *"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 80
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v2

      - name: Configure JDK 1.11
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "11" # minimum for Android API31

      - name: Install Android Command Line Tools
        uses: android-actions/setup-android@v2

        # TODO: Ignore lines like we do in the Unix scripts, rather than all of them
      - name: Install NDK (silent)
        run: |
          Write-Host "NDK Install Started"
          Write-Host "ANDROID_HOME - $Env:ANDROID_HOME"
          Write-Host "ANDROID_SDK_ROOT - $Env:ANDROID_SDK_ROOT"
          (. sdkmanager.bat --install "ndk;22.0.7026061" --sdk_root="$Env:ANDROID_SDK_ROOT") | out-null
          Write-Host "NDK Install Completed"

      # bzip2-sys does not build when the value of CC_armv7-linux-androideabi contains a space
      # Setting this variable is a pain, as it contains a dash
      # It's easier to just move the directory and fix the environment variables to point to the new NDK
      # we change Program Files (x86) to "ProgramFiles"
      # TODO: Move the setting of environment variables here (permanently)
      - name: Move SDK to directory with no spaces
        run: |
          New-Item -ItemType directory -Path 'C:\ProgramFiles\Android'
          Get-ChildItem "$Env:ANDROID_SDK_ROOT"
          Move-Item -Path "$Env:ANDROID_SDK_ROOT" -Destination 'C:\ProgramFiles\Android' -ErrorAction Stop -Force
          Get-ChildItem 'C:\ProgramFiles\Android\android-sdk'

      - name: Debug Env
        run: |
          $Env:ANDROID_HOME

      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Install Rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: 1.58.1
          override: true
          components: rustfmt

      # actions-rs only accepts "target" (although a "targets" param to be added in v2). We need 4 targets.
      - name: Install Rust Targets
        run: |
          rustup target add armv7-linux-androideabi 
          rustup target add i686-linux-android
          rustup target add aarch64-linux-android
          rustup target add x86_64-linux-android

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install & Test Protobuf
        run: |
          Set-Alias -Name "python3" -Value "python"
          pip3 install --upgrade protobuf stringcase
          python3 .github/scripts/protoc_gen_deps.py

      - name: Rust Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rslib-bridge/target
          key: ${{ runner.os }}-rust-v1-assembleRelease-${{ hashFiles('rslib-bridge/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-v1-assembleRelease
            ${{ runner.os }}-rust-v1

      - name: Setup bazel
        run: |
          mkdir \bazel
          cd \bazel
          curl https://github.com/bazelbuild/bazelisk/releases/download/v1.10.1/bazelisk-windows-amd64.exe -o bazel.exe
          $env:PATH = "c:\bazel;c:\msys64\usr\bin;$env:PATH"

      - name: Bazel cache
        id: bazel-cache
        uses: actions/cache@v2
        with:
          path: |
            C:\Users\runneradmin\_bazel_runneradmin
          key: ${{ runner.os }}-v1-bazel-cache-${{ hashFiles('rslib-bridge/anki/defs.bzl') }}
          restore-keys: |
            ${{ runner.os }}-v1-bazel-cache

      - name: Node module cache
        id: node-module-cache
        uses: actions/cache@v2
        with:
          path: |
            rslib-bridge/anki/node_modules
          key: ${{ runner.os }}-v1-node-module-cache-${{ hashFiles('rslib-bridge/anki/package.json') }}
          restore-keys: |
            ${{ runner.os }}-v1-node-module-cache-
            ${{ runner.os }}-v1-node-module-cache

      # -Dorg.gradle.daemon=false has been removed
      # -Dorg.gradle.console=plain has been removed
      #      env:
      #     ANDROID_HOME: "C:\\ProgramFiles\\Android\\android-sdk"
      #     ANDROID_NDK_HOME: "C:\\ProgramFiles\\Android\\android-sdk\\ndk-bundle"
      #     ANDROID_NDK_PATH: "C:\\ProgramFiles\\Android\\android-sdk\\ndk-bundle"
      #     ANDROID_SDK_ROOT: "C:\\ProgramFiles\\Android\\android-sdk"
      - name: Build
        run: |
          $Env:ANDROID_HOME = "C:\ProgramFiles\Android\android-sdk"
          $Env:ANDROID_NDK_HOME =  "C:\ProgramFiles\Android\android-sdk\ndk-bundle"
          $Env:ANDROID_NDK_PATH =  "C:\ProgramFiles\Android\android-sdk\ndk-bundle"
          $Env:ANDROID_SDK_ROOT =  "C:\ProgramFiles\Android\android-sdk"
          $env:ANDROID_HOME      
          echo "Removing Bash from WSL"
          rm.exe "C:/WINDOWS/system32/bash.EXE"
          Set-Alias -Name bash -Value "C:/msys64/usr/bin/bash.exe"
          $env:BAZEL_SH = "C:/msys64/usr/bin/bash.exe"
          [Environment]::SetEnvironmentVariable('BAZEL_SH', 'C:/msys64/usr/bin/bash.exe', 'Machine')
          ./gradlew clean assembleRelease -DtestBuildType=release # assembleAndroidTest
