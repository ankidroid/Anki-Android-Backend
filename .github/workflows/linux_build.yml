name: rsdroid (Linux)
on:
  workflow_dispatch:
  push:
  schedule:
    - cron: "0 0 * * *"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    timeout-minutes: 80
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Configure JDK 1.11
        uses: actions/setup-java@v3
        with:
          distribution: "adopt"
          java-version: "11" # minimum for Android API31

      - name: Install Android Command Line Tools
        uses: android-actions/setup-android@v2

      # COULD_BE_BETTER: Consider turning this into a GitHub action - help the wider community
      # NDK install (unzipping) is really noisy - silence the log spam with grep, while keeping errors
      - name: Install NDK (silent)
        run: .github/scripts/install_ndk.sh 22.0.7026061

      - name: Install linker
        run: .github/scripts/linux_install_x86_64-unknown-linux-gnu-gcc.sh

      # install cargo
      - name: Install Rust
        uses: actions-rs/toolchain@v1.0.6
        with:
          toolchain: 1.58.1
          override: true
          components: rustfmt

      # actions-rs only accepts "target" (although a "targets" param to be added in v2). We need 7 targets.
      - name: Install Rust Targets
        run: .github/scripts/install_rust_targets.sh

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Python libs
        run: |
          pip3 install --upgrade protobuf stringcase

      - name: Rust Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            rslib-bridge/target
          key: ${{ runner.os }}-rust-v1-assembleRelease-${{ hashFiles('rslib-bridge/**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-v1-assembleRelease
            ${{ runner.os }}-rust-v1

      # Caching node modules and bazel, the bazel cache path on linux, mac and windows are according to following docs
      # https://docs.bazel.build/versions/main/output_directories.html
      - name: Node and Bazel cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cache/bazel
            rslib-bridge/anki/node_modules
          key: ${{ runner.os }}-v1-node-bazel-cache-${{ hashFiles('rslib-bridge/anki/package.json') }}-${{ hashFiles('rslib-bridge/anki/defs.bzl') }}
          restore-keys: |
            ${{ runner.os }}-v1-node-bazel-cache

      - name: Build
        run: ./gradlew clean assembleRelease -DtestBuildType=release -Dorg.gradle.daemon=false -Dorg.gradle.console=plain # assembleAndroidTest

      # Our publish workflow (publish_library.yaml) is on Ubuntu and needs javadocs (#57)
      - name: Test Javadoc
        run: ./gradlew :rsdroid:androidJavadocs -DtestBuildType=release -Dorg.gradle.daemon=false -Dorg.gradle.console=plain
