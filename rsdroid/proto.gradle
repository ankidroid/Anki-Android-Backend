import org.gradle.internal.os.OperatingSystem

def protobufFolder = new File(rootDir, "rslib-bridge/anki/proto").getAbsolutePath()
def droidProtobufFolder = new File(rootDir, "rslib-bridge/proto").getAbsolutePath()

android {
    if (!new File(protobufFolder).exists()) {
        throw new GradleException("Protobuf folder does not exist: " + new File(protobufFolder).getAbsolutePath() + ". Were git submodules applied?")
    }
    // COULD_BE_BETTER: validate .proto files exist in directory on build.
    
    sourceSets {
        main {
            proto {
                srcDir protobufFolder
                srcDir droidProtobufFolder
            }
        }
    }
}

protobuf {
    String protocGenPath = OperatingSystem.current().isWindows() ? 'tools\\protoc-gen\\protoc-gen.bat' : 'tools/protoc-gen/protoc-gen.sh'
    File f = new File(project.rootDir, protocGenPath)
    if (!f.exists()) {
        throw new IllegalStateException("'${f.absolutePath}' does not exist")
    }
    System.out.println("protoc-gen: '${f.absolutePath}'")
    plugins {
        // Define a plugin with name 'anki'.
        anki { path = f.absolutePath }
    }
    protoc {
        artifact = "com.google.protobuf:protoc:${rootProject.ext.protobufVersion}"
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    // Options ref:
                    // https://github.com/protocolbuffers/protobuf/blob/1dd483444c19a9b1fa2c782156db8e7eefe3ad38/src/google/protobuf/compiler/java/java_generator.cc#L76-L97

                    // can no longer use common interface: GeneratedMessageV3 if we use lite
                    // But we should consider other options, as this generates a class: BackendService
                    // which is confusing and of no use to us
                    // option "lite"
                }
            }
            task.plugins {
                anki { }
            }
        }
    }
}