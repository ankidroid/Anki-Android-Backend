import com.android.build.gradle.tasks.BundleAar
import com.vanniktech.maven.publish.SonatypeHost
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import java.util.zip.ZipFile

apply plugin: 'com.android.library' // required for aar generation to link to from AnkiDroid
apply plugin: "kotlin-android"
apply plugin: 'signing'
apply plugin: 'com.vanniktech.maven.publish'

apply from: "$rootDir/build-rust.gradle"
preBuild.dependsOn "buildRust"

def getAnkiCommitHash = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "-C", new File("${project.rootDir}", "anki"), "rev-parse", "HEAD"
        standardOutput = hashStdOut
    }
    def commit = hashStdOut.toString().trim()
    println("Anki commit: ${commit}")
    return commit
}

def getAnkiDesktopVersion() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('gradle.properties').newDataInputStream())
    def versionName = properties.getProperty('VERSION_NAME')
    return versionName.substring(versionName.indexOf("anki") + "anki".length())
}

/**
 * @return the current git hash
 * @example edf739d95bad7b370a6ed4398d46723f8219b3cd
 */
static def getBackendGitCommitHash() {
    "git rev-parse HEAD".execute().text.trim()
}

android {
    namespace 'net.ankiweb.rsdroid'
    compileSdk rootProject.ext.compileSdk
    ndkVersion "26.1.10909125" // Used by GitHub actions - avoids an install step on some machines

    buildFeatures {
        buildConfig true // expose 'ANKI_DESKTOP_VERSION'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    defaultConfig {
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        versionCode 1
        versionName VERSION_NAME

        consumerProguardFiles "consumer-rules.pro"

        buildConfigField "String", "ANKI_COMMIT_HASH", "\"${getAnkiCommitHash()}\""
        buildConfigField "String", "ANKI_DESKTOP_VERSION", "\"${getAnkiDesktopVersion()}\""

        buildConfigField "String", "BACKEND_GIT_COMMIT_HASH", "\"${getBackendGitCommitHash()}\""
        buildConfigField "long", "BACKEND_BUILD_TIME", System.currentTimeMillis().toString()
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            kotlin.srcDirs += "build/generated/source/backend"
            java.srcDirs += "build/generated/source/backend"
            jniLibs.srcDirs 'build/generated/jniLibs'
            resources {
                srcDirs "src/main/resources"
            }
            assets {
                srcDirs "build/generated/anki_artifacts"
            }
        }
    }

    kotlinOptions {
        jvmTarget = '11'
    }
}

afterEvaluate {
    tasks.withType(BundleAar).configureEach { bundleAarTask ->
        bundleAarTask.doLast {
            def aarFile = bundleAarTask.outputs.files.singleFile
            def zipFile = new ZipFile(aarFile)
            int libCount = zipFile.entries().toList().count { it.name.contains(".so") }
            if (libCount == 0 || (System.getenv("ALL_ARCHS") == "1" && libCount != 4)) {
                throw new GradleException("AAR appears to be missing shared library!")
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", '*.so'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompatVersion}"
    // Protobuf is part of the ABI, so include it as a compile/api dependency.
    api "com.google.protobuf:protobuf-kotlin-lite:${rootProject.ext.protobufVersion}"

    implementation "androidx.sqlite:sqlite-ktx:${rootProject.ext.sqliteVersion}"
    implementation "androidx.sqlite:sqlite-framework:${rootProject.ext.sqliteVersion}"
    implementation 'com.jakewharton.timber:timber:5.0.1'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'
    testImplementation "org.robolectric:robolectric:4.12.1"
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation "androidx.test.ext:junit:${rootProject.ext.androidxTestJunitVersion}"
    testImplementation project(path: ':rsdroid-testing')
}

tasks.withType(KotlinCompile).configureEach {
    compilerOptions {
        freeCompilerArgs = ["-opt-in=kotlin.RequiresOptIn"]
    }
}

mavenPublishing {
    // Use https://central.sonatype.com/account with david-allison's GitHub login, not Google
    // the host should match rsdroid-testing
    publishToMavenCentral(SonatypeHost.CENTRAL_PORTAL, true)
    // publishToMavenCentral("S01") for publishing through s01.oss.sonatype.org
    signAllPublications()
}
