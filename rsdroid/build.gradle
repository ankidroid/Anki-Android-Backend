apply plugin: 'com.android.library' // required for aar generation to link to from AnkiDroid
apply plugin: "kotlin-android"
apply plugin: 'signing'
apply plugin: 'com.vanniktech.maven.publish'

apply from: "$rootDir/build-web-assets.gradle"

def getAnkiCommitHash = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "-C", new File("${project.rootDir}", "anki"), "rev-parse", "HEAD"
        standardOutput = hashStdOut
    }
    def commit = hashStdOut.toString().trim()
    println("Anki commit: ${commit}")
    return commit
}

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    ndkVersion "25.2.9519653" // Used by GitHub actions - avoids an install step on some machines

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName VERSION_NAME

        consumerProguardFiles "consumer-rules.pro"

        buildConfigField("String", "ANKI_COMMIT_HASH", "\"${getAnkiCommitHash()}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    sourceSets {
        main {
            kotlin.srcDirs += "build/generated/source/backend"
            java.srcDirs += "build/generated/source/backend"
            jniLibs.srcDirs 'build/generated/jniLibs'
            resources {
                srcDirs "src/main/resources", "build/generated/anki_artifacts"
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", '*.so'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompatVersion}"
    // Protobuf is part of the ABI, so include it as a compile/api dependency.
    api "com.google.protobuf:protobuf-kotlin-lite:${rootProject.ext.protobufVersion}"

    implementation "androidx.sqlite:sqlite:${rootProject.ext.sqliteVersion}"
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'androidx.sqlite:sqlite-framework:2.2.0'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.robolectric:robolectric:4.9.2"
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation "androidx.test.ext:junit:${rootProject.ext.androidxTestJunitVersion}"
    testImplementation project(path: ':rsdroid-testing')

}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        freeCompilerArgs = ["-opt-in=kotlin.RequiresOptIn"]
    }
}

preBuild.dependsOn "buildRust"

def getSdkDir() {
    Properties properties = new Properties()
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
    return properties.getProperty('sdk.dir')
}

task buildRust(type: Exec) {
    // ensure script doesn't try to start gradle again
    environment 'RUNNING_FROM_GRADLE', '1'
    if (!System.getenv('ANDROID_NDK_HOME')) {
        String ndkPath = "${getSdkDir()}/ndk/25.2.9519653"
        environment 'ANDROID_NDK_HOME', ndkPath
    }
    workingDir "$rootDir"
    commandLine "cargo", "run", "-p", "build_rust"
}

signing {
    def hasPrivate = project.hasProperty('SIGNING_PRIVATE_KEY')
    def hasPassword = project.hasProperty('SIGNING_PASSWORD')
    if (hasPrivate && hasPassword) {
        useInMemoryPgpKeys(project.getProperty('SIGNING_PRIVATE_KEY'), project.getProperty('SIGNING_PASSWORD'))
    } else {
        def message = "Publishing to Sonatype will not work - PGP keys not set for publishing"

        def pk = System.getenv("ORG_GRADLE_PROJECT_SIGNING_PRIVATE_KEY")
        def pwd = System.getenv("ORG_GRADLE_PROJECT_SIGNING_PASSWORD")

        logger.warn("$message: ${hasPrivate}, ${hasPassword}, ${pk == null || "" == pk}, ${pwd == null || "" == pwd}")
    }
}
