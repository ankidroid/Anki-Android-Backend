apply plugin: 'com.android.library' // required for aar generation to link to from AnkiDroid
apply plugin: 'com.google.protobuf'
apply plugin: 'signing'
apply plugin: 'com.vanniktech.maven.publish'

def getAnkiCommitHash = { ->
    def hashStdOut = new ByteArrayOutputStream()
    exec {
        commandLine "git", "-C", new File("${project.rootDir}", "rslib-bridge/anki"), "rev-parse", "HEAD"
        standardOutput = hashStdOut
    }
    def commit = hashStdOut.toString().trim()
    println("Anki commit: ${commit}")
    return commit
}

android {
    compileSdkVersion 30
    ndkVersion "22.0.7026061" // Used by GitHub actions - avoids an install step on some machines

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 1
        versionName VERSION_NAME

        consumerProguardFiles "consumer-rules.pro"

        buildConfigField("String", "ANKI_COMMIT_HASH", "\"${getAnkiCommitHash()}\"")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

// Consider upgrade to DSL: https://docs.gradle.org/current/userguide/plugins.html#sec:plugins_block
apply plugin: "org.mozilla.rust-android-gradle.rust-android"

cargo {
    module = "../rslib-bridge"
    libname = "rsdroid"
    targets = ["x86", "arm", "x86_64", "arm64"]
    profile = 'release'
    apiLevel = 21
    verbose = true
}

apply from: "proto.gradle"

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", '*.so'])
    implementation "androidx.appcompat:appcompat:${rootProject.ext.appcompatVersion}"
    // Protobuf is part of the ABI, so include it as a compile/api dependency.
    api "com.google.protobuf:protobuf-java:${rootProject.ext.protobufVersion}"
    implementation 'androidx.sqlite:sqlite:2.1.0'
    implementation 'com.jakewharton.timber:timber:5.0.1'

    testImplementation 'junit:junit:4.13.2'
    testImplementation "org.robolectric:robolectric:4.5.1"
    testImplementation 'androidx.test:core:1.4.0'
    testImplementation "androidx.test.ext:junit:${rootProject.ext.androidxTestJunitVersion}"
    testImplementation project(path: ':rsdroid-testing')

}

preBuild.dependsOn "cargoBuild"

signing {
    def hasPrivate = project.hasProperty('SIGNING_PRIVATE_KEY')
    def hasPassword = project.hasProperty('SIGNING_PASSWORD')
    if (hasPrivate && hasPassword) {
        useInMemoryPgpKeys(project.getProperty('SIGNING_PRIVATE_KEY'), project.getProperty('SIGNING_PASSWORD'))
    } else {
        def message = "Publishing to Sonatype will not work - PGP keys not set for publishing"

        def pk = System.getenv("ORG_GRADLE_PROJECT_SIGNING_PRIVATE_KEY")
        def pwd = System.getenv("ORG_GRADLE_PROJECT_SIGNING_PASSWORD")

        logger.warn("$message: ${hasPrivate}, ${hasPassword}, ${pk == null || "" == pk}, ${pwd == null || "" == pwd}")
    }
}